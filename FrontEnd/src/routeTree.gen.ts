/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminAddUserImport } from './routes/admin/addUser'
import { Route as AdminAddStoreImport } from './routes/admin/addStore'
import { Route as AdminUserUseridImport } from './routes/admin/user/$userid'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAddUserRoute = AdminAddUserImport.update({
  id: '/addUser',
  path: '/addUser',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAddStoreRoute = AdminAddStoreImport.update({
  id: '/addStore',
  path: '/addStore',
  getParentRoute: () => AdminRoute,
} as any)

const AdminUserUseridRoute = AdminUserUseridImport.update({
  id: '/user/$userid',
  path: '/user/$userid',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/admin/addStore': {
      id: '/admin/addStore'
      path: '/addStore'
      fullPath: '/admin/addStore'
      preLoaderRoute: typeof AdminAddStoreImport
      parentRoute: typeof AdminImport
    }
    '/admin/addUser': {
      id: '/admin/addUser'
      path: '/addUser'
      fullPath: '/admin/addUser'
      preLoaderRoute: typeof AdminAddUserImport
      parentRoute: typeof AdminImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof AdminImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/admin/user/$userid': {
      id: '/admin/user/$userid'
      path: '/user/$userid'
      fullPath: '/admin/user/$userid'
      preLoaderRoute: typeof AdminUserUseridImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminAddStoreRoute: typeof AdminAddStoreRoute
  AdminAddUserRoute: typeof AdminAddUserRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminUserUseridRoute: typeof AdminUserUseridRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAddStoreRoute: AdminAddStoreRoute,
  AdminAddUserRoute: AdminAddUserRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminUserUseridRoute: AdminUserUseridRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/addStore': typeof AdminAddStoreRoute
  '/admin/addUser': typeof AdminAddUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/admin/user/$userid': typeof AdminUserUseridRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/addStore': typeof AdminAddStoreRoute
  '/admin/addUser': typeof AdminAddUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/admin/user/$userid': typeof AdminUserUseridRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/addStore': typeof AdminAddStoreRoute
  '/admin/addUser': typeof AdminAddUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/admin/user/$userid': typeof AdminUserUseridRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/addStore'
    | '/admin/addUser'
    | '/admin/dashboard'
    | '/auth/login'
    | '/auth/signup'
    | '/admin/user/$userid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/addStore'
    | '/admin/addUser'
    | '/admin/dashboard'
    | '/auth/login'
    | '/auth/signup'
    | '/admin/user/$userid'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/addStore'
    | '/admin/addUser'
    | '/admin/dashboard'
    | '/auth/login'
    | '/auth/signup'
    | '/admin/user/$userid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth/login",
        "/auth/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/addStore",
        "/admin/addUser",
        "/admin/dashboard",
        "/admin/user/$userid"
      ]
    },
    "/admin/addStore": {
      "filePath": "admin/addStore.tsx",
      "parent": "/admin"
    },
    "/admin/addUser": {
      "filePath": "admin/addUser.tsx",
      "parent": "/admin"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx",
      "parent": "/admin"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/admin/user/$userid": {
      "filePath": "admin/user/$userid.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
